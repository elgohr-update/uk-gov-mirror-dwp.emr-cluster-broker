version: 2.1

orbs:
  snyk: snyk/snyk@0.0.8

executors:
  docker-publisher:
    environment:
      IMAGE_NAME: dwpdigital/emr-cluster-broker
    docker:
      - image: circleci/buildpack-deps:stretch
jobs:
  build:
    environment:
      IMAGE_NAME: dwpdigital/emr-cluster-broker
    docker:
      - image: circleci/openjdk:11.0.3-jdk-stretch
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: |
            ./gradlew clean build
            docker build --tag dwpdigital/emr-cluster-broker:latest .
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar

  test:
    docker:
      - image: circleci/openjdk:11.0.3-jdk-stretch
    steps:
      - checkout
      - run:
          name: Run gradle tests
          command: |
            ./gradlew build test

  snyk-pr:
    docker:
      - image: circleci/openjdk:11.0.3-jdk-stretch
    steps:
      - checkout
      # Snyk scan examines build.gradle for sev:high and will fail if found
      - snyk/scan:
          organization: dwp-dataworks
          severity-threshold: high
          project: '${CIRCLE_PROJECT_REPONAME}/pr-kotlin'

  snyk-master:
    docker:
      - image: circleci/openjdk:11.0.3-jdk-stretch
    steps:
      - checkout
      # Snyk scan examines build.gradle for sev:high and will fail if found
      - snyk/scan:
          organization: dwp-dataworks
          severity-threshold: high
          project: '${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BRANCH}-kotlin'

  publish-latest:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            set -u
            set +o pipefail
            LATEST_VERSION=$(curl --silent "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
            set -o pipefail
            read MAJOR MINOR PATCH \<<< $( echo $LATEST_VERSION | awk -F '[ .]' '{maj = $1+0; min = $2+0; patch = $3+0; print maj, min, patch}' )
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$MAJOR
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$MAJOR.$MINOR
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$MAJOR.$MINOR.$PATCH
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:$MAJOR
            docker push $IMAGE_NAME:$MAJOR.$MINOR
            docker push $IMAGE_NAME:$MAJOR.$MINOR.$PATCH

  publish-github-release:
    docker:
      - image: cibuilds/github:0.10
    steps:
      - attach_workspace:
          at: ./artifacts
      - run:
          name: Publish Release on GitHub
          command: |
            set -u
            set +o pipefail
            LATEST_VERSION=$(curl --silent "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
            set -o pipefail
            [  -z "$LATEST_VERSION" ] && LATEST_VERSION="0.0.0"
            VERSION=$(echo $LATEST_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
            echo "ghr -t GITHUB_TOKEN -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${VERSION} ./artifacts/"
            echo ${VERSION} > VERSION
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${VERSION} ./VERSION

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - test
      - snyk-pr:
          filters:
            branches:
              ignore: master
      - snyk-master:
          filters:
            branches:
              only: master
      - publish-github-release:
          requires:
            - build
          filters:
            branches:
              only: master
      - publish-latest:
          requires:
            - build
            - publish-github-release
          filters:
            branches:
              only: master
